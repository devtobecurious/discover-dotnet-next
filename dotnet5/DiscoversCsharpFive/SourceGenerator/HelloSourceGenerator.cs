using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System;
using System.Linq;

namespace SourceGenerator
{
    [Generator]
    public class HelloSourceGenerator : ISourceGenerator
    {
        public void Execute(GeneratorExecutionContext context)
        {
            // Find the main method
            var mainMethod = context.Compilation.GetEntryPoint(context.CancellationToken);

            foreach (var syntaxTree in context.Compilation.SyntaxTrees)
            {
                var model = context.Compilation.GetSemanticModel(syntaxTree);
                var classes = syntaxTree.GetRoot().DescendantNodes().OfType<ClassDeclarationSyntax>();

                foreach (var classDecl in classes)
                {
                    var classSymbol = model.GetDeclaredSymbol(classDecl);

                    if (classSymbol.GetAttributes().Any(ad => ad.AttributeClass.ToDisplayString().Contains("ToGenerateMore")))
                    {
                        string source = $@"// <auto-generated/>
                            using System;

                            namespace {classSymbol.ContainingNamespace.Name}
                            {{
                                public partial class {classSymbol.Name} 
                                {{ 
                                    partial void Hurler() 
                                    {{ 
                                        Console.WriteLine(""grrrr"");
                                    }}
                                }}
                            }}
                            ";
                        context.AddSource($"{classSymbol.Name}-{Guid.NewGuid().ToString()}.g.cs", source);
                    }
                }
            }


        }

        public void Initialize(GeneratorInitializationContext context)
        {
            // No initialization required for this one
        }
    }
}